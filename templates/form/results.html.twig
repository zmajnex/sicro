{% extends ('base.html.twig')%}
{% block body %}
<div class="m-4">
<div class="card">
  <div class="card-header text-center">
    <span class="text-success"><strong>RESULTS</strong></span>
  </div>
  <div class="card-body">
    <p class="card-text">Crawling <strong>{{url}}</strong> is finshed.</p> 
  </div>
</div>
{# Titles on <a> tag #}
<div class="card">
  <div class="card-header">
    <strong>Title tags</strong>
  </div>
  <div class="card-body">
  <p>List of links with missing titles tags</p>
    {% if hasTitle !=0 %}
	<p><strong>{{titles}}</strong> of your "a" tags has title.</p>
	<a class="btn btn-primary" data-toggle="collapse" href="#collapseLinks" role="button" aria-expanded="false" aria-controls="collapseLinks">Show links</a>
        <div class="collapse" id="collapseLinks">
          <div class="card card-body">
			<ul>
				{% for missingTitle in missingTitles %}
					<li>
						<a href="{{ missingTitle }}">{{ missingTitle }}</a>
					</li>
				{% endfor %}
			</ul>
		{% else %}
			<p>Your page has no links!</p>
		{% endif %} 
  </div>
</div>
</div>
{# Meta description #}
<div class="card">
  <div class="card-header">
    <strong>Meta description length</strong>
  </div>
  <div class="card-body">
  <p>Meta description</p>
  <p class="card-text">{{metaDescription }}</p>
  </div>
</div>				
{# Meta title #}
<div class="card">
  <div class="card-header">
    <strong>Meta title</strong>
  </div>
  <div class="card-body">
 <p>Page title</p>
 <p class="card-text">{{titleLength}}</p>
</div>
{# Images missing alt tag #}
<div class="card">
  <div class="card-header">
    <strong>Images</strong> 
  </div>
  <div class="card-body">
 <p>Images missing alt tag</p>
 {% if hasImages !=0 %}
	<p class="card-text"><strong>{{missingAlts}} </strong> of your "image" tags has alt tag.</p>
			{% if missingAlts != "100 %" %}
				<div class="row">
					{% for imagesWitNoAltTag in imagesWitNoAltTags %}
						<img src="{{ imagesWitNoAltTag }}" style="width:200px;height:200px">
					{% endfor %}
				</div>
			{% else %}
				<p class="card-text">All your images has alt tags.</p>
			{% endif %}
<h5>List of images with missing alt tag:</h5>
	<a class="btn btn-primary" data-toggle="collapse" href="#collapseImages" role="button" aria-expanded="false" aria-controls="collapseImages">Show links</a>
        <div class="collapse" id="collapseImages">
          <div class="card card-body">
			{% if missingAlts != "100 %" %}
				<ul>
					{% for imagesWitNoAltTag in imagesWitNoAltTags %}
						<li>
							<a href="{{ imagesWitNoAltTag }}">{{ imagesWitNoAltTag }}</a>
						</li>
					{% endfor %}
				</ul>
			{% else %}
				<p >Congratulations! No images to add alt tag.</p>
			{% endif %}
		{% else %}
			<p >Your page has no images</p>
	{% endif %}
	        </div>
		</div>
</div>
{# Headings #}
<div class="card">
  <div class="card-header">
    <strong>Headings</strong>
  </div>
  <div class="card-body">
	<table class="table">
    <thead>
      <tr>
        <th>H1</th>
        <th>H2</th>
        <th>H3</th>
		<th>H4</th>
		<th>H5</th>
		<th>H6</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>{{h1}}</td>
        <td>{{h2}}</td>
		<td>{{h3}}</td>
		<td>{{h4}}</td>
		<td>{{h5}}</td>
		<td>{{h6}}</td>
      </tr>
          
    </tbody>
  </table>
  </div>
</div>
{# Broken Links #}
<div class="card">
  <div class="card-header">
    <strong>Broken Links</strong>
  </div>
  <div class="card-body">
{% if brokenLinks is iterable %}
    {% for brokenLink in brokenLinks %}
        <ul>
		<li href="{{brokenLink}}"><a> {{ brokenLink }}</a><li>
		</ul>
    {% endfor %}
    {% else %}
    <p> {{ brokenLinks }}</p>
    {% endif %}
  </div>
</div>

{# Core webVitals #}
<div id="wrapper">
  <h1>Chrome User Experience Report</h1>
  <p>The field data collected over the last 28 days.</p>
</div>
<script>

// Core Web Vitals
const CrUXApiUtil = {};
CrUXApiUtil.KEY = "AIzaSyAjN0Vnqv-enL6-QN8oX5RNc8FyJUDpOg0";


CrUXApiUtil.query = async function (requestBody) {
  const endpointUrl = 'https://chromeuxreport.googleapis.com/v1/records:queryRecord';
  const resp = await fetch(`${endpointUrl}?key=${CrUXApiUtil.KEY}`, {
    method: 'POST',
    body: JSON.stringify(requestBody),
  });

  const json = await resp.json();
  if (!resp.ok) {
    throw new Error(json.error.message);
  }
  return json;
};

// Gather the data for example.com and display it
(async function () {
  const json = await CrUXApiUtil.query({origin: '{{url}}'});
  console.log('CrUX API response:', json);

  const labeledMetrics = labelMetricData(json.record.metrics);

  // Display metric results
  for (const metric of labeledMetrics) {
    const metricEl = document.createElement('section');

    const titleEl = document.createElement('h2');
    titleEl.textContent = metric.acronym;

    const [descEl, barsEl] = createDescriptionAndBars(metric.labeledBins);

    metricEl.append(titleEl, descEl, barsEl);
    document.getElementById('wrapper').append(metricEl);
  }
})();


function labelMetricData(metrics) {
  const nameToAcronymMap = {
    first_contentful_paint: 'FCP',
    largest_contentful_paint: 'LCP',
    first_input_delay: 'FID',
    cumulative_layout_shift: 'CLS',
  };

  return Object.entries(metrics).map(([metricName, metricData]) => {
    const standardBinLabels = ['good', 'needs improvement', 'poor'];
    const metricBins = metricData.histogram;

    // We assume there are 3 histogram bins and they're in order of: good => poor
    const labeledBins = metricBins.map((bin, i) => {
      // Assign a good/poor label, calculate a percentage, and add retain all existing bin properties
      return {
        label: standardBinLabels[i],
        percentage: bin.density * 100,
        ...bin,
      };
    });

    return {
      acronym: nameToAcronymMap[metricName],
      name: metricName,
      labeledBins,
    };
  });
}

// Create the three bars w/ a 3-column grid
// This consumes the output from labelMetricData, not a raw API response.
function createDescriptionAndBars(labeledBins) {
  const descEl = document.createElement('p');
  // Example: 'good: 43.63%, needs improvement: 42.10%, poor: 14.27%'
  descEl.textContent = labeledBins
    .map(bin => `${bin.label}: ${bin.percentage.toFixed(2)}%`)
    .join(', ');

  let barsEl = document.createElement('div');

  for (const bin of labeledBins) {
    const barEl = document.createElement('div');
    // Reuse the label for the styling class, changing any spaces:  `needs improvement` => `needs-improvement`
    barEl.classList.add(`box-${bin.label.replace(' ', '-')}`);
    // Add tooltip to share the size of each bin
    barEl.title = `bin start: ${bin.start}, bin end: ${bin.end}`;
    barsEl.append(barEl);
  }

  // Set the width of the bar columns based on metric bins
  // Ex: `grid-template-columns: 43.51% 42.26% 14.23%`;
  barsEl.style.gridTemplateColumns = labeledBins.map(bin => `${bin.percentage}%`).join(' ');
  barsEl.classList.add(`grid-container`);

  return [descEl, barsEl];
}

</script>

{% endblock %}
